{"ast":null,"code":"import _asyncToGenerator from \"D:/Code/angular-crm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class RegisterComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.loading = false;\n    this.success = false;\n    this.registerError = false;\n    this.registerForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(3)]]\n    });\n  }\n\n  ngOnInit() {}\n\n  register() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this.registerError = false;\n        _this.loading = true; // this.authServiece.login(this.loginForm.value)\n\n        _this.success = true;\n      } catch (error) {\n        _this.registerError = true;\n      }\n\n      _this.loading = false;\n    })();\n  }\n\n  get email() {\n    return this.registerForm.get('email');\n  }\n\n  get password() {\n    return this.registerForm.get('password');\n  }\n\n}\n\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\n\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 2,\n  vars: 0,\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"register works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJyZWdpc3Rlci5jb21wb25lbnQuc2NzcyJ9 */\"]\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\src\\app\\register\\register.component.ts","D:\\Code\\angular-crm\\src\\app\\register\\register.component.html"],"names":[],"mappings":";AACA,SAAiC,UAAjC,QAAmD,gBAAnD;;;AAOA,OAAM,MAAO,iBAAP,CAAwB;AAiB5B,EAAA,WAAA,CAAoB,EAApB,EAAmC;AAAf,SAAA,EAAA,GAAA,EAAA;AAfpB,SAAA,OAAA,GAAmB,KAAnB;AACA,SAAA,OAAA,GAAmB,KAAnB;AACA,SAAA,aAAA,GAAyB,KAAzB;AAEA,SAAA,YAAA,GAA0B,KAAK,EAAL,CAAQ,KAAR,CAAc;AACtC,MAAA,KAAK,EAAE,CAAC,EAAD,EAAK,CACV,UAAU,CAAC,QADD,EAEV,UAAU,CAAC,KAFD,CAAL,CAD+B;AAKtC,MAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,CACb,UAAU,CAAC,QADE,EAEb,UAAU,CAAC,SAAX,CAAqB,CAArB,CAFa,CAAL;AAL4B,KAAd,CAA1B;AAWwC;;AAExC,EAAA,QAAQ,GAAA,CACP;;AAEK,EAAA,QAAQ,GAAA;AAAA;;AAAA;AACZ,UAAI;AACF,QAAA,KAAI,CAAC,aAAL,GAAqB,KAArB;AACA,QAAA,KAAI,CAAC,OAAL,GAAe,IAAf,CAFE,CAGF;;AACA,QAAA,KAAI,CAAC,OAAL,GAAe,IAAf;AACD,OALD,CAKE,OAAO,KAAP,EAAc;AACd,QAAA,KAAI,CAAC,aAAL,GAAqB,IAArB;AACD;;AACD,MAAA,KAAI,CAAC,OAAL,GAAe,KAAf;AATY;AAUb;;AAEQ,MAAL,KAAK,GAAA;AACP,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAsB,OAAtB,CAAP;AACD;;AAEW,MAAR,QAAQ,GAAA;AACV,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAsB,UAAtB,CAAP;AACD;;AAxC2B;;;mBAAjB,iB,EAAiB,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,WAAA,C;AAAA,C;;;QAAjB,iB;AAAiB,EAAA,SAAA,EAAA,CAAA,CAAA,cAAA,CAAA,C;AAAA,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,0BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;ACR9B,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,GAAA;AAAG,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,iBAAA;AAAe,MAAA,EAAA,CAAA,YAAA","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  loading: boolean = false;\n  success: boolean = false;\n  registerError: boolean = false;\n\n  registerForm: FormGroup = this.fb.group({\n    email: ['', [\n      Validators.required,\n      Validators.email\n    ]],\n    password: ['', [\n      Validators.required,\n      Validators.minLength(3)\n    ]]\n  });\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n  }\n\n  async register() {\n    try {\n      this.registerError = false;\n      this.loading = true;\n      // this.authServiece.login(this.loginForm.value)\n      this.success = true;\n    } catch (error) {\n      this.registerError = true;\n    }\n    this.loading = false;\n  }\n\n  get email() {\n    return this.registerForm.get('email')\n  }\n\n  get password() {\n    return this.registerForm.get('password')\n  }\n\n}\n","<p>register works!</p>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}