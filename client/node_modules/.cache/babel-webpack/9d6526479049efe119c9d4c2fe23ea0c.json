{"ast":null,"code":"import _asyncToGenerator from \"D:/Code/angular-crm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component, Output, EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(fb, dataService) {\n    this.fb = fb;\n    this.dataService = dataService;\n    this.loading = false;\n    this.registerError = false;\n    this.success = new EventEmitter(false);\n    this.registerForm = this.fb.group({\n      firstName: ['', [Validators.required, Validators.minLength(1)]],\n      lastName: ['', [Validators.required, Validators.minLength(1)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(3)]],\n      age: ['', [Validators.required, Validators.min(18)]]\n    });\n  }\n\n  ngOnInit() {}\n\n  register() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this.registerError = false;\n        _this.loading = true;\n        const user = Object.assign(Object.assign({}, _this.registerForm.value), {\n          token: null\n        });\n        _this.dataService.insertUser = user;\n\n        _this.success.emit(true);\n      } catch (error) {\n        _this.registerError = true;\n      }\n\n      _this.loading = false;\n    })();\n  }\n\n  get email() {\n    return this.registerForm.get('email');\n  }\n\n  get password() {\n    return this.registerForm.get('password');\n  }\n\n  get age() {\n    return this.registerForm.get('age');\n  }\n\n};\n\n__decorate([Output()], RegisterComponent.prototype, \"success\", void 0);\n\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n  styles: []\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"sources":["D:\\Code\\angular-crm\\src\\app\\login-register\\register\\register.component.ts"],"names":[],"mappings":";;AAAA,SAAS,SAAT,EAA4B,MAA5B,EAAoC,YAApC,QAAwD,eAAxD;AACA,SAAiC,UAAjC,QAAmD,gBAAnD;AASA,IAAa,iBAAiB,GAA9B,MAAa,iBAAb,CAA8B;AA6B5B,EAAA,WAAA,CAAoB,EAApB,EAA6C,WAA7C,EAAqE;AAAjD,SAAA,EAAA,GAAA,EAAA;AAAyB,SAAA,WAAA,GAAA,WAAA;AA3B7C,SAAA,OAAA,GAAmB,KAAnB;AACA,SAAA,aAAA,GAAyB,KAAzB;AACU,SAAA,OAAA,GAAU,IAAI,YAAJ,CAA0B,KAA1B,CAAV;AAEV,SAAA,YAAA,GAA0B,KAAK,EAAL,CAAQ,KAAR,CAAc;AACtC,MAAA,SAAS,EAAE,CAAC,EAAD,EAAK,CACd,UAAU,CAAC,QADG,EAEd,UAAU,CAAC,SAAX,CAAqB,CAArB,CAFc,CAAL,CAD2B;AAKtC,MAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,CACb,UAAU,CAAC,QADE,EAEb,UAAU,CAAC,SAAX,CAAqB,CAArB,CAFa,CAAL,CAL4B;AAStC,MAAA,KAAK,EAAE,CAAC,EAAD,EAAK,CACV,UAAU,CAAC,QADD,EAEV,UAAU,CAAC,KAFD,CAAL,CAT+B;AAatC,MAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,CACb,UAAU,CAAC,QADE,EAEb,UAAU,CAAC,SAAX,CAAqB,CAArB,CAFa,CAAL,CAb4B;AAiBtC,MAAA,GAAG,EAAE,CAAC,EAAD,EAAK,CACR,UAAU,CAAC,QADH,EAER,UAAU,CAAC,GAAX,CAAe,EAAf,CAFQ,CAAL;AAjBiC,KAAd,CAA1B;AAuB0E;;AAE1E,EAAA,QAAQ,GAAA,CACP;;AAEK,EAAA,QAAQ,GAAA;AAAA;;AAAA;AACZ,UAAI;AACF,QAAA,KAAI,CAAC,aAAL,GAAqB,KAArB;AACA,QAAA,KAAI,CAAC,OAAL,GAAe,IAAf;AACA,cAAM,IAAI,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAc,KAAI,CAAC,YAAL,CAAkB,KAAhC,CAAA,EAAqC;AAAE,UAAA,KAAK,EAAE;AAAT,SAArC,CAAV;AACA,QAAA,KAAI,CAAC,WAAL,CAAiB,UAAjB,GAA8B,IAA9B;;AACA,QAAA,KAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,IAAlB;AACD,OAND,CAME,OAAO,KAAP,EAAc;AACd,QAAA,KAAI,CAAC,aAAL,GAAqB,IAArB;AACD;;AACD,MAAA,KAAI,CAAC,OAAL,GAAe,KAAf;AAVY;AAWb;;AAEQ,MAAL,KAAK,GAAA;AACP,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAsB,OAAtB,CAAP;AACD;;AAEW,MAAR,QAAQ,GAAA;AACV,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAsB,UAAtB,CAAP;AACD;;AAEM,MAAH,GAAG,GAAA;AACL,WAAO,KAAK,YAAL,CAAkB,GAAlB,CAAsB,KAAtB,CAAP;AACD;;AAzD2B,CAA9B;;AAIY,UAAA,CAAA,CAAT,MAAM,EAAG,CAAA,E,2BAAA,E,SAAA,E,KAA2C,CAA3C,CAAA;;AAJC,iBAAiB,GAAA,UAAA,CAAA,CAL7B,SAAS,CAAC;AACT,EAAA,QAAQ,EAAE,cADD;AAET,EAAA,WAAW,EAAE,2BAFJ;AAGT,EAAA,SAAS,EAAE,CAAC,2BAAD,CAHF;;AAAA,CAAD,CAKoB,CAAA,EAAjB,iBAAiB,CAAjB;SAAA,iB","sourcesContent":["import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { User } from '../interface/user';\nimport { DataService } from '../services/data.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  loading: boolean = false;\n  registerError: boolean = false;\n  @Output() success = new EventEmitter<boolean>(false);\n\n  registerForm: FormGroup = this.fb.group({\n    firstName: ['', [\n      Validators.required,\n      Validators.minLength(1)\n    ]],\n    lastName: ['', [\n      Validators.required,\n      Validators.minLength(1)\n    ]],\n    email: ['', [\n      Validators.required,\n      Validators.email\n    ]],\n    password: ['', [\n      Validators.required,\n      Validators.minLength(3)\n    ]],\n    age: ['', [\n      Validators.required,\n      Validators.min(18)\n    ]]\n  });\n\n  constructor(private fb: FormBuilder, private dataService: DataService) { }\n\n  ngOnInit(): void {\n  }\n\n  async register() {\n    try {\n      this.registerError = false;\n      this.loading = true;\n      const user: User = {... this.registerForm.value, token: null}\n      this.dataService.insertUser = user;\n      this.success.emit(true);\n    } catch (error) {\n      this.registerError = true;\n    }\n    this.loading = false;\n  }\n\n  get email() {\n    return this.registerForm.get('email')\n  }\n\n  get password() {\n    return this.registerForm.get('password')\n  }\n\n  get age() {\n    return this.registerForm.get('age')\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}