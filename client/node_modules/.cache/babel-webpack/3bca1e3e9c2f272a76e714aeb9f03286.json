{"ast":null,"code":"import _asyncToGenerator from \"D:/Code/angular-crm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./products.service\";\nimport * as i2 from \"./local-save.service\";\nexport class PurchaseService {\n  constructor(productsService, localSaveService) {\n    this.productsService = productsService;\n    this.localSaveService = localSaveService;\n    this.purchasableIds = [];\n    this.purchaseHistory = this.localSaveService.loadPurchaseHistory();\n  }\n\n  getPurchasableIds() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this.productsService.getPurchasableIds().then(ids => ids);\n    })();\n  }\n\n  setCustomerRandomPurchase(customer) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.purchasableIds.length === 0) {\n        _this2.purchasableIds = yield _this2.getPurchasableIds();\n      }\n\n      const randomAmountOfPurchases = Math.floor(Math.random() * 10);\n      customer.purchased = [];\n\n      for (let i = 0; i < randomAmountOfPurchases; i++) {\n        const randomPurchase = _this2._getRandomPurchase(customer.id);\n\n        _this2._makeAPurchase(customer, randomPurchase);\n      }\n    })();\n  }\n\n  _makeAPurchase(customer, purchasedObject) {\n    var _a;\n\n    (_a = customer.purchased) === null || _a === void 0 ? void 0 : _a.push(purchasedObject);\n    this.productsService.increasePurchaseCounter(purchasedObject.id);\n  }\n\n  _getRandomPurchase(customerId) {\n    const randomIndex = Math.floor(Math.random() * this.purchasableIds.length);\n    const productId = this.purchasableIds[randomIndex];\n    const price = this.productsService.getProductPrice(productId);\n    return {\n      customer_id: customerId,\n      id: productId,\n      date: this.getRandomDate(),\n      total_cost: price ? price : ''\n    };\n  }\n\n  getRandomDate() {\n    const date = new Date();\n    const nowDay = date.getDay();\n    const nowMonth = date.getMonth();\n    const randomPastDay = Math.floor(Math.random() * nowDay);\n    const randomPastMonth = Math.floor(Math.random() * nowMonth);\n    date.setDate(randomPastDay ? randomPastDay : 1);\n    date.setMonth(randomPastMonth ? randomPastMonth : 1);\n    return date;\n  }\n\n  saveToPurchaseHistory(users) {\n    var _a;\n\n    const unsortedPurchasedList = this._getPurchaseList(users);\n\n    const sortedHistoryByDate = this._sortListByDate(unsortedPurchasedList);\n\n    (_a = this.purchaseHistory) === null || _a === void 0 ? void 0 : _a.push(...sortedHistoryByDate);\n    this.localSaveService.saveToLocal('purchaseHistory', this.purchaseHistory);\n  }\n\n  _getPurchaseList(users) {\n    let purchasedList = [];\n    users.forEach(user => {\n      var _a;\n\n      (_a = user.purchased) === null || _a === void 0 ? void 0 : _a.forEach(purchased => purchasedList.push(purchased));\n    });\n    return purchasedList;\n  }\n\n  _sortListByDate(purchased) {\n    return purchased.sort((purchasedA, purchasedB) => {\n      return purchasedA.date > purchasedB.date ? -1 : purchasedB.date > purchasedA.date ? 1 : 0;\n    });\n  }\n\n}\n\nPurchaseService.ɵfac = function PurchaseService_Factory(t) {\n  return new (t || PurchaseService)(i0.ɵɵinject(i1.ProductsService), i0.ɵɵinject(i2.LocalSaveService));\n};\n\nPurchaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PurchaseService,\n  factory: PurchaseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\src\\app\\services\\purchase.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Id, Purchased, RandomUser } from '../domain-layer/entities/random-users';\nimport { LocalSaveService } from './local-save.service';\nimport { ProductsService } from './products.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PurchaseService {\n  purchasableIds: number[] = [];\n  purchaseHistory: Purchased[];\n\n  constructor(\n    private readonly productsService: ProductsService,\n    private localSaveService: LocalSaveService\n  ) {\n    this.purchaseHistory = this.localSaveService.loadPurchaseHistory();\n  }\n\n  async getPurchasableIds(): Promise<number[]> {\n    return await this.productsService.getPurchasableIds().then((ids) => ids);\n  }\n\n  async setCustomerRandomPurchase(customer: RandomUser) {\n    if (this.purchasableIds.length === 0) {\n      this.purchasableIds = await this.getPurchasableIds();\n    }\n    const randomAmountOfPurchases = Math.floor(Math.random() * 10);\n    customer.purchased = [];\n    for (let i = 0; i < randomAmountOfPurchases; i++) {\n      const randomPurchase = this._getRandomPurchase(customer.id);\n      this._makeAPurchase(customer, randomPurchase);\n    }\n  }\n\n  private _makeAPurchase(\n    customer: RandomUser,\n    purchasedObject: Purchased\n  ): void {\n    customer.purchased?.push(purchasedObject);\n    this.productsService.increasePurchaseCounter(purchasedObject.id);\n  }\n\n  private _getRandomPurchase(customerId: Id): Purchased {\n    const randomIndex = Math.floor(Math.random() * this.purchasableIds.length);\n    const productId = this.purchasableIds[randomIndex];\n    const price = this.productsService.getProductPrice(productId);\n\n    return {\n      customer_id: customerId,\n      id: productId,\n      date: this.getRandomDate(),\n      total_cost: price ? price : '',\n    };\n  }\n\n  getRandomDate(): Date {\n    const date = new Date();\n    const nowDay = date.getDay();\n    const nowMonth = date.getMonth();\n    const randomPastDay = Math.floor(Math.random() * nowDay);\n    const randomPastMonth = Math.floor(Math.random() * nowMonth);\n    date.setDate(randomPastDay ? randomPastDay : 1);\n    date.setMonth(randomPastMonth ? randomPastMonth : 1);\n    return date;\n  }\n\n  saveToPurchaseHistory(users: RandomUser[]) {\n    const unsortedPurchasedList = this._getPurchaseList(users);\n    const sortedHistoryByDate = this._sortListByDate(unsortedPurchasedList);\n    this.purchaseHistory?.push(... sortedHistoryByDate);\n    this.localSaveService.saveToLocal('purchaseHistory', this.purchaseHistory);\n  }\n\n  private _getPurchaseList(users: RandomUser[]): Purchased[] {\n    let purchasedList: Purchased[] = [];\n    users.forEach((user) => {\n      user.purchased?.forEach((purchased) => purchasedList.push(purchased))\n    })\n    return purchasedList\n  }\n\n  private _sortListByDate(purchased: Purchased[]): Purchased[] {\n    return purchased.sort((purchasedA, purchasedB) => {\n      return (purchasedA.date > purchasedB.date) ? -1 : (purchasedB.date > purchasedA.date) ? 1 : 0;\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}