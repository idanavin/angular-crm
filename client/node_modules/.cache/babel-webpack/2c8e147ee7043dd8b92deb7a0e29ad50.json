{"ast":null,"code":"import _asyncToGenerator from \"D:/Code/angular-crm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./local-save.service\";\nexport class ProductsService {\n  constructor(httpClient, localSaveService) {\n    this.httpClient = httpClient;\n    this.localSaveService = localSaveService;\n    this.categories = [];\n  }\n\n  getProducts(amount) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.loadProducts();\n\n      if (!_this.products) {\n        return yield _this._getAmountOfProducts(amount).then(products => {\n          _this.products = products;\n\n          _this.setCategories(products);\n\n          _this.localSaveService.saveToLocal('products', products);\n\n          return products;\n        });\n      }\n\n      return _this.products;\n    })();\n  }\n\n  loadProducts() {\n    const products = this.localSaveService.loadProducts();\n\n    if (products) {\n      this.products = products;\n    }\n  }\n\n  setCategories(products) {\n    this.categories = this.localSaveService.loadCategories();\n    products.map(product => {\n      var _a, _b;\n\n      const category = (_a = this.categories) === null || _a === void 0 ? void 0 : _a.find(category => category = product.category);\n\n      if (!category) {\n        (_b = this.categories) === null || _b === void 0 ? void 0 : _b.push(product.category);\n      }\n\n      return;\n    });\n    this.localSaveService.saveToLocal('product_categories', this.categories);\n  }\n\n  _getAmountOfProducts(amount = 20) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const products = yield _this2.httpClient.get(`https://fakestoreapi.com/products?limit=${amount}`).toPromise();\n      return products;\n    })();\n  }\n\n}\n\nProductsService.ɵfac = function ProductsService_Factory(t) {\n  return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalSaveService));\n};\n\nProductsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductsService,\n  factory: ProductsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\src\\app\\services\\products.service.ts"],"names":[],"mappings":";;;;AAQA,OAAM,MAAO,eAAP,CAAsB;AAI1B,EAAA,WAAA,CAAoB,UAApB,EAAoD,gBAApD,EAAsF;AAAlE,SAAA,UAAA,GAAA,UAAA;AAAgC,SAAA,gBAAA,GAAA,gBAAA;AAFpD,SAAA,UAAA,GAAuB,EAAvB;AAE0F;;AAEpF,EAAA,WAAW,CAAC,MAAD,EAAe;AAAA;;AAAA;AAC9B,MAAA,KAAI,CAAC,YAAL;;AACA,UAAI,CAAC,KAAI,CAAC,QAAV,EAAoB;AAClB,qBAAa,KAAI,CAAC,oBAAL,CAA0B,MAA1B,EAAkC,IAAlC,CACV,QAAD,IAAa;AACX,UAAA,KAAI,CAAC,QAAL,GAAgB,QAAhB;;AACA,UAAA,KAAI,CAAC,aAAL,CAAmB,QAAnB;;AACA,UAAA,KAAI,CAAC,gBAAL,CAAsB,WAAtB,CAAkC,UAAlC,EAA8C,QAA9C;;AACA,iBAAO,QAAP;AACD,SANU,CAAb;AAQD;;AACD,aAAO,KAAI,CAAC,QAAZ;AAZ8B;AAa/B;;AAED,EAAA,YAAY,GAAA;AACV,UAAM,QAAQ,GAAG,KAAK,gBAAL,CAAsB,YAAtB,EAAjB;;AACA,QAAI,QAAJ,EAAc;AACZ,WAAK,QAAL,GAAgB,QAAhB;AACD;AACF;;AAED,EAAA,aAAa,CAAC,QAAD,EAA0B;AACrC,SAAK,UAAL,GAAkB,KAAK,gBAAL,CAAsB,cAAtB,EAAlB;AACA,IAAA,QAAQ,CAAC,GAAT,CAAa,OAAO,IAAG;;;AACrB,YAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,KAAK,UAAL,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAe,EAAA,CAAE,IAAF,CAAO,QAAQ,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAtC,CAAhC;;AACA,UAAI,CAAC,QAAL,EAAe;AACb,SAAA,EAAA,GAAA,KAAK,UAAL,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAe,EAAA,CAAE,IAAF,CAAO,OAAO,CAAC,QAAf,CAAf;AACD;;AACD;AACD,KAND;AAOA,SAAK,gBAAL,CAAsB,WAAtB,CAAkC,oBAAlC,EAAwD,KAAK,UAA7D;AACD;;AAEa,EAAA,oBAAoB,CAAC,MAAA,GAAiB,EAAlB,EAAoB;AAAA;;AAAA;AACpD,YAAM,QAAQ,SAAS,MAAI,CAAC,UAAL,CACpB,GADoB,CACC,2CAA2C,MAAM,EADlD,EAEpB,SAFoB,EAAvB;AAGA,aAAO,QAAP;AAJoD;AAKrD;;AA7CyB;;;mBAAf,e,EAAe,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,gBAAA,C;AAAA,C;;;SAAf,e;AAAe,EAAA,OAAA,EAAf,eAAe,CAAA,I;AAAA,EAAA,UAAA,EAFd","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { RandomProduct } from '../interface/product';\nimport { LocalSaveService } from './local-save.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductsService {\n  products?: RandomProduct[];\n  categories: string[] = [];\n\n  constructor(private httpClient: HttpClient, private localSaveService: LocalSaveService) {}\n\n  async getProducts(amount: number): Promise<RandomProduct[]> {\n    this.loadProducts();\n    if (!this.products) {\n      return await this._getAmountOfProducts(amount).then(\n        (products) => {\n          this.products = products\n          this.setCategories(products)\n          this.localSaveService.saveToLocal('products', products)\n          return products\n        }\n      );\n    }\n    return this.products\n  }\n\n  loadProducts() {\n    const products = this.localSaveService.loadProducts();\n    if (products) {\n      this.products = products;\n    }\n  }\n\n  setCategories(products: RandomProduct[]) {\n    this.categories = this.localSaveService.loadCategories()\n    products.map(product => {\n      const category = this.categories?.find(category => category = product.category)\n      if (!category) {\n        this.categories?.push(product.category)\n      }\n      return\n    })\n    this.localSaveService.saveToLocal('product_categories', this.categories)\n  }\n\n  private async _getAmountOfProducts(amount: number = 20): Promise<RandomProduct[]> {\n    const products = await this.httpClient\n      .get<RandomProduct[]>(`https://fakestoreapi.com/products?limit=${amount}`)\n      .toPromise();\n    return products;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}