{"ast":null,"code":"import { forwardRef } from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { InputAutocompleteComponent } from \"./input-autocomplete.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/form-field\";\nimport * as i2 from \"@angular/material/input\";\nimport * as i3 from \"@angular/material/autocomplete\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../form-errors/form-errors.component\";\nimport * as i6 from \"@angular/material/core\";\n\nfunction InputAutocompleteCustomerSearch_mat_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", ctx_r1.getStringFromOption(option_r2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.getStringFromOption(option_r2), \" \");\n  }\n}\n\nexport class InputAutocompleteCustomerSearch extends InputAutocompleteComponent {\n  // ? Think of a way to extend behavior of InputAutocompleteComponent with input with RandomUser[] Type\n  // filteredOptions!: Observable<RandomUser[]>;\n  constructor() {\n    super();\n  }\n\n}\n\nInputAutocompleteCustomerSearch.ɵfac = function InputAutocompleteCustomerSearch_Factory(t) {\n  return new (t || InputAutocompleteCustomerSearch)();\n};\n\nInputAutocompleteCustomerSearch.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: InputAutocompleteCustomerSearch,\n  selectors: [[\"app-input-autocomplete-customer-search\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputAutocompleteCustomerSearch),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 9,\n  vars: 9,\n  consts: [[\"appearance\", \"outline\"], [\"matInput\", \"\", 3, \"value\", \"disabled\", \"id\", \"matAutocomplete\", \"input\", \"blur\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"formField\"], [3, \"value\"]],\n  template: function InputAutocompleteCustomerSearch_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-form-field\", 0);\n      i0.ɵɵelementStart(1, \"mat-label\");\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"input\", 1);\n      i0.ɵɵlistener(\"input\", function InputAutocompleteCustomerSearch_Template_input_input_3_listener($event) {\n        return ctx.onChange($event);\n      })(\"blur\", function InputAutocompleteCustomerSearch_Template_input_blur_3_listener() {\n        return ctx.touched();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"mat-autocomplete\", null, 2);\n      i0.ɵɵtemplate(6, InputAutocompleteCustomerSearch_mat_option_6_Template, 2, 2, \"mat-option\", 3);\n      i0.ɵɵpipe(7, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"app-form-errors\", 4);\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(5);\n\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"value\", ctx.value)(\"disabled\", ctx.isDisabled)(\"id\", ctx.fieldName)(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(7, 7, ctx.filteredOptions));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formField\", ctx.formField);\n    }\n  },\n  directives: [i1.MatFormField, i1.MatLabel, i2.MatInput, i3.MatAutocompleteTrigger, i3.MatAutocomplete, i4.NgForOf, i5.FormErrorsComponent, i6.MatOption],\n  pipes: [i4.AsyncPipe],\n  styles: [\"mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksV0FBQTtBQUNKIiwiZmlsZSI6ImlucHV0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsibWF0LWZvcm0tZmllbGQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn0iXX0= */\"]\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\client\\src\\app\\shared\\form\\input\\input-autocomplete\\input-autocomplete-customer-search.ts","D:\\Code\\angular-crm\\client\\src\\app\\shared\\form\\input\\input-autocomplete\\input-autocomplete.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, forwardRef } from \"@angular/core\";\r\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\nimport { Observable } from \"rxjs\";\r\nimport { RandomUser } from \"src/app/domain-layer/entities/random-users\";\r\nimport { InputAutocompleteComponent } from \"./input-autocomplete.component\";\r\n\r\n@Component({\r\n    selector: 'app-input-autocomplete-customer-search',\r\n  templateUrl: './input-autocomplete.component.html',\r\n  // Same style as input\r\n  styleUrls: ['../input.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(\r\n        () => InputAutocompleteCustomerSearch\r\n      ),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class InputAutocompleteCustomerSearch extends InputAutocompleteComponent {\r\n    \r\n    // ? Think of a way to extend behavior of InputAutocompleteComponent with input with RandomUser[] Type\r\n    // filteredOptions!: Observable<RandomUser[]>;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    // getStringFromOption(option: RandomUser): string {\r\n    //     return ''\r\n    // }\r\n}","<mat-form-field appearance=\"outline\">\r\n  <mat-label>{{ label }}</mat-label>\r\n  <input\r\n    matInput\r\n    [value]=\"value\"\r\n    [disabled]=\"isDisabled\"\r\n    (input)=\"onChange($event)\"\r\n    (blur)=\"touched()\"\r\n    [id]=\"fieldName\"\r\n    [matAutocomplete]=\"auto\"\r\n  >\r\n  <mat-autocomplete #auto=\"matAutocomplete\">\r\n    <mat-option *ngFor=\"let option; of filteredOptions | async\" [value]=\"getStringFromOption(option)\">\r\n      {{ getStringFromOption(option) }}\r\n    </mat-option>\r\n  </mat-autocomplete>\r\n</mat-form-field>\r\n<app-form-errors [formField]=\"formField\"></app-form-errors>\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}