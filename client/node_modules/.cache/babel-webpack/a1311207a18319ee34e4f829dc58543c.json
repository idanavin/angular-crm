{"ast":null,"code":"import _asyncToGenerator from \"D:/Code/angular-crm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductsService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n\n    this._getAmountOfProducts(10).then(products => this.products = products);\n\n    console.log(this.products);\n  }\n\n  _getAmountOfProducts(amount) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const products = yield _this.httpClient.get(`https://fakestoreapi.com/products?limit=${amount}`).toPromise();\n      return products;\n    })();\n  }\n\n}\n\nProductsService.ɵfac = function ProductsService_Factory(t) {\n  return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nProductsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductsService,\n  factory: ProductsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\src\\app\\services\\products.service.ts"],"names":[],"mappings":";;;AAOA,OAAM,MAAO,eAAP,CAAsB;AAI1B,EAAA,WAAA,CAAoB,UAApB,EAA0C;AAAtB,SAAA,UAAA,GAAA,UAAA;;AAClB,SAAK,oBAAL,CAA0B,EAA1B,EAA8B,IAA9B,CAAmC,QAAQ,IAAI,KAAK,QAAL,GAAgB,QAA/D;;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,KAAK,QAAjB;AAGD;;AAEa,EAAA,oBAAoB,CAAC,MAAD,EAAe;AAAA;;AAAA;AAC/C,YAAM,QAAQ,SAAS,KAAI,CAAC,UAAL,CACpB,GADoB,CAEnB,2CAA2C,MAAM,EAF9B,EAIpB,SAJoB,EAAvB;AAKA,aAAO,QAAP;AAN+C;AAOhD;;AAlByB;;;mBAAf,e,EAAe,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAf,e;AAAe,EAAA,OAAA,EAAf,eAAe,CAAA,I;AAAA,EAAA,UAAA,EAFd","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { RandomProduct } from '../interface/product';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n\n  products?: RandomProduct[];\n\n  constructor(private httpClient: HttpClient) { \n    this._getAmountOfProducts(10).then(products => this.products = products);\n    console.log(this.products);\n    \n    \n  }\n\n  private async _getAmountOfProducts(amount: number) {\n    const products = await this.httpClient\n      .get<RandomProduct[]>(\n        `https://fakestoreapi.com/products?limit=${amount}`\n      )\n      .toPromise();\n    return products\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}