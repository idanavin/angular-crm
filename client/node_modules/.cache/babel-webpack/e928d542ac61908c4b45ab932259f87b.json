{"ast":null,"code":"import _asyncToGenerator from \"D:/Code/angular-crm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CostumersService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.users = new Map();\n    this.users.set('unsorted', []);\n  }\n\n  getCostumersByPage(itemsPerPage, page, order) {\n    const lastIndex = itemsPerPage * (page + 1);\n    const firstIndex = lastIndex - itemsPerPage;\n    if (!this.users.has(order.active)) this.sortUsers(order);\n    let list = this.users.get(order.active);\n\n    if (lastIndex <= list.length) {\n      return this.getLocalCostumers(firstIndex, lastIndex, list);\n    } else {\n      return this.loadRandomUsers(itemsPerPage);\n    }\n  }\n\n  getLocalCostumers(firstIndex, lastIndex, users) {\n    return _asyncToGenerator(function* () {\n      return users.slice(firstIndex, lastIndex);\n    })();\n  }\n\n  loadRandomUsers(itemsPerPage) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const pageNumber = 1;\n      const users = yield _this.httpClient.get(`https://randomuser.me/api/?page=${pageNumber}&results=${itemsPerPage}`).toPromise();\n\n      _this.users.set('unsorted', [..._this.users.get('unsorted'), ...users.results]);\n\n      _this.saveToLocalstorage();\n\n      return users.results;\n    })();\n  }\n\n  saveToLocalstorage() {\n    localStorage.setItem(`costumers`, JSON.stringify(this.users.get('unsorted')));\n  }\n\n  loadLocalstorage() {\n    const costumers = localStorage.getItem('costumers');\n    if (costumers) this.users.set('unsorted', JSON.parse(costumers));\n  }\n\n  sortUsers(sort) {\n    const {\n      active,\n      direction\n    } = sort;\n    const unorderedList = this.users.get('unsorted');\n    this.users.set(active, [...unorderedList].sort((a, b) => {\n      if (direction === 'asc') return a.dob.age - b.dob.age;else return b.dob.age - a.dob.age;\n    }));\n  }\n\n}\n\nCostumersService.ɵfac = function CostumersService_Factory(t) {\n  return new (t || CostumersService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nCostumersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CostumersService,\n  factory: CostumersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\src\\app\\services\\costumers.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { stringify } from '@angular/compiler/src/util';\r\nimport { Injectable } from '@angular/core';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { costumers } from '../data/data';\r\nimport { RandomUser, RandomUsers } from '../domain-layer/entities/random-users';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CostumersService {\r\n\r\n  users: Map<string, RandomUser[]> = new Map<\r\n    string,\r\n    RandomUser[]\r\n  >();\r\n\r\n  constructor(private readonly httpClient: HttpClient) {\r\n    this.users.set('unsorted', [])\r\n  }\r\n\r\n  getCostumersByPage(itemsPerPage: number, page: number, order: Sort): Promise<RandomUser[]> {\r\n    const lastIndex = itemsPerPage * (page + 1);\r\n    const firstIndex = lastIndex - itemsPerPage;\r\n\r\n    if (!this.users.has(order.active)) this.sortUsers(order)\r\n    let list: RandomUser[] = this.users.get(order.active)!;\r\n\r\n    if (lastIndex <= list.length) {\r\n      return this.getLocalCostumers(firstIndex, lastIndex, list);\r\n    } else {\r\n      return this.loadRandomUsers(itemsPerPage)\r\n    }\r\n  }\r\n\r\n  private async getLocalCostumers(firstIndex: number, lastIndex: number, users: RandomUser[]): Promise<RandomUser[]> {\r\n    return users.slice(firstIndex, lastIndex);\r\n  }\r\n\r\n  private async loadRandomUsers(itemsPerPage: number): Promise<RandomUser[]> {\r\n    const pageNumber = 1;\r\n    const users = await this.httpClient\r\n      .get<RandomUsers>(\r\n        `https://randomuser.me/api/?page=${pageNumber}&results=${itemsPerPage}`\r\n      )\r\n      .toPromise();\r\n\r\n    this.users.set('unsorted', [... this.users.get('unsorted')!, ...users.results])\r\n    this.saveToLocalstorage();\r\n    return users.results\r\n  }\r\n\r\n  private saveToLocalstorage(): void {\r\n    localStorage.setItem(`costumers`, JSON.stringify(this.users.get('unsorted')))\r\n  }\r\n\r\n  loadLocalstorage(): void {\r\n    const costumers = localStorage.getItem('costumers')\r\n    if (costumers) this.users.set('unsorted', JSON.parse(costumers) as RandomUser[])\r\n  }\r\n\r\n  private sortUsers(sort: Sort): void {\r\n    const { active, direction } = sort\r\n    const unorderedList: RandomUser[] = this.users.get('unsorted')!;\r\n    this.users.set(active, [...unorderedList].sort((a, b) => {\r\n      if (direction === 'asc') return a.dob.age - b.dob.age\r\n      else return b.dob.age - a.dob.age\r\n    }))\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}