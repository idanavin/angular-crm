{"ast":null,"code":"import _asyncToGenerator from \"D:/Code/angular-crm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./purchase.service\";\nimport * as i3 from \"./customers-filter.service\";\nexport class CustomersService {\n  constructor(httpClient, purchaseService, filterService) {\n    this.httpClient = httpClient;\n    this.purchaseService = purchaseService;\n    this.filterService = filterService;\n    this.users = new Map();\n    this.users.set('unsorted', []);\n  }\n\n  get UnsortedUsers() {\n    return this.users.get('unsorted');\n  }\n\n  get CustomersCount() {\n    return this.UnsortedUsers.length;\n  }\n\n  getCustomersWithProducts(amount, products) {\n    this.loadLocalstorage();\n    const customers = this.UnsortedUsers;\n\n    if (customers.length < amount) {\n      amount -= customers.length;\n\n      this._loadRandomUsers(amount, products);\n    }\n  }\n\n  getCustomersByPage(itemsPerPage, page, order) {\n    const lastIndex = itemsPerPage * (page + 1);\n    const firstIndex = lastIndex - itemsPerPage;\n\n    const list = this._getListInOrder(order);\n\n    const filteredList = this.filterService.getFilteredFromCustomersList(list);\n\n    if (lastIndex <= filteredList.length) {\n      return this.getLocalCustomers(firstIndex, lastIndex, filteredList);\n    } // return this._loadRandomUsers(itemsPerPage);\n\n\n    return Promise.reject('Unable to get customers');\n  }\n\n  getLocalCustomers(firstIndex, lastIndex, users) {\n    return _asyncToGenerator(function* () {\n      return users.slice(firstIndex, lastIndex);\n    })();\n  }\n\n  _loadRandomUsers(itemsPerPage, products) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const pageNumber = 1;\n      const users = yield _this.httpClient.get(`https://randomuser.me/api/?page=${pageNumber}&results=${itemsPerPage}`).toPromise();\n\n      _this._makeRandomPurchases(users.results, products);\n\n      _this.users.set('unsorted', [..._this.users.get('unsorted'), ...users.results]);\n\n      _this._saveToLocalstorage();\n\n      return users.results;\n    })();\n  }\n\n  _makeRandomPurchases(users, products) {\n    this.purchaseService.setPurchaseableIds(products);\n    users.forEach(user => this.purchaseService.setCustomerRandomPurchase(user));\n    this.purchaseService.saveToPurchaseHistory(users);\n  }\n\n  _getListInOrder(sortOrder) {\n    sortOrder = this._changeSortDirectionIfUnsorted(sortOrder);\n\n    this._sortIfNotExist(sortOrder);\n\n    return this.users.get(`${sortOrder.active}${sortOrder.direction}`);\n  }\n\n  _sortIfNotExist(sortOrder) {\n    if (!this.users.has(`${sortOrder.active}${sortOrder.direction}`)) {\n      this._sortUsers(sortOrder);\n    }\n  }\n\n  _changeSortDirectionIfUnsorted(sort) {\n    if (sort.active === 'unsorted') {\n      sort.direction = '';\n    }\n\n    return sort;\n  }\n\n  _saveToLocalstorage() {\n    localStorage.setItem(`customers`, JSON.stringify(this.users.get('unsorted')));\n  }\n\n  loadLocalstorage() {\n    const customers = localStorage.getItem('customers');\n    if (customers) this.users.set('unsorted', JSON.parse(customers));\n  }\n\n  _sortUsers(sort) {\n    const {\n      active,\n      direction\n    } = sort;\n    const unorderedList = this.users.get('unsorted');\n    this.users.set(`${active}${direction}`, [...unorderedList].sort((userA, userB) => {\n      if (direction === 'asc') return this._sortByType(userA, userB, sort.active);else return this._sortByType(userB, userA, sort.active);\n    }));\n  }\n\n  _sortByType(userA, userB, sortType) {\n    if (sortType === 'age') return userA.dob.age - userB.dob.age;else return userA.name.last > userB.name.last ? 1 : userB.name.last > userA.name.last ? -1 : 0;\n  }\n\n  addNewCustomers(customer) {\n    const customers = [customer, ...this.users.get('unsorted')];\n    this.resetUsersWithUnsorted(customers);\n  }\n\n  resetUsersWithUnsorted(customers) {\n    this.users.clear();\n    this.users.set('unsorted', customers);\n\n    this._saveToLocalstorage();\n  }\n\n  setCustomersToEdit(customers) {\n    this.usersToEdit = customers;\n  }\n\n  customersToEdit() {\n    return this.usersToEdit;\n  }\n\n  findAndReplaceEdited(editedCustomers) {\n    var _a;\n\n    let unsortedUsers = this.users.get('unsorted');\n    (_a = this.usersToEdit) === null || _a === void 0 ? void 0 : _a.forEach((costumer, index) => {\n      const indexToEdit = unsortedUsers.findIndex(unsortedCostumer => {\n        return unsortedCostumer.id.value === costumer.id.value;\n      });\n      unsortedUsers[indexToEdit] = editedCustomers[index];\n    });\n    this.resetUsersWithUnsorted(unsortedUsers);\n  }\n\n  removeCustomers(customers) {\n    let unsortedUsers = this.users.get('unsorted');\n    customers.map(costumerToRemove => {\n      unsortedUsers = unsortedUsers.filter(costumerInMemory => costumerInMemory != costumerToRemove);\n    });\n    this.resetUsersWithUnsorted(unsortedUsers);\n  }\n\n  getCustomersAgeRanges() {\n    const customersAges = this.users.get('unsorted').map(user => {\n      return user.dob.age;\n    });\n    const minAge = Math.min(...customersAges);\n    const maxAge = Math.max(...customersAges);\n    return {\n      min: minAge,\n      max: maxAge\n    };\n  }\n\n  getCustomersPurchasesRanges() {\n    const customers = this.UnsortedUsers;\n    const customersPurchasesLength = customers.map(customer => {\n      var _a;\n\n      return (_a = customer.purchased) === null || _a === void 0 ? void 0 : _a.length;\n    });\n    return {\n      min: Math.min(...customersPurchasesLength),\n      max: Math.max(...customersPurchasesLength)\n    };\n  }\n\n  getMoneySpentRanges() {\n    const customers = this.UnsortedUsers;\n    const customersMaxSpentList = customers.map(user => {\n      var _a;\n\n      return (_a = user.purchased) === null || _a === void 0 ? void 0 : _a.reduce((acc, value) => acc + parseFloat(value.total_cost), 0);\n    });\n    return {\n      min: 0,\n      max: Math.max(...customersMaxSpentList)\n    };\n  }\n\n}\n\nCustomersService.ɵfac = function CustomersService_Factory(t) {\n  return new (t || CustomersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.PurchaseService), i0.ɵɵinject(i3.CustomersFilterService));\n};\n\nCustomersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CustomersService,\n  factory: CustomersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\src\\app\\services\\customers.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Sort } from '@angular/material/sort';\r\nimport {\r\n  Purchased,\r\n  RandomUser,\r\n  RandomUsers,\r\n} from '../domain-layer/entities/random-users';\r\nimport { RandomProduct } from '../interface/product';\r\nimport { RangeType } from '../shared/range-slider/range-slider.component';\r\nimport { CustomersFilterService } from './customers-filter.service';\r\nimport { PurchaseService } from './purchase.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CustomersService {\r\n  usersToEdit?: RandomUser[];\r\n  users: Map<string, RandomUser[]> = new Map<string, RandomUser[]>();\r\n\r\n  constructor(\r\n    private readonly httpClient: HttpClient,\r\n    private purchaseService: PurchaseService,\r\n    private filterService: CustomersFilterService\r\n  ) {\r\n    this.users.set('unsorted', []);\r\n  }\r\n\r\n  get UnsortedUsers(): RandomUser[] {\r\n    return this.users.get('unsorted')!;\r\n  }\r\n\r\n  get CustomersCount(): number {\r\n    return this.UnsortedUsers.length;\r\n  }\r\n\r\n  getCustomersWithProducts(amount: number, products: RandomProduct[]) {\r\n    this.loadLocalstorage();\r\n    const customers = this.UnsortedUsers;\r\n    if (customers.length < amount) {\r\n      amount -= customers.length;\r\n      this._loadRandomUsers(amount, products);\r\n    }\r\n  }\r\n\r\n  getCustomersByPage(\r\n    itemsPerPage: number,\r\n    page: number,\r\n    order: Sort\r\n  ): Promise<RandomUser[]> {\r\n    const lastIndex = itemsPerPage * (page + 1);\r\n    const firstIndex = lastIndex - itemsPerPage;\r\n    const list: RandomUser[] = this._getListInOrder(order);\r\n    const filteredList = this.filterService.getFilteredFromCustomersList(list);\r\n\r\n    if (lastIndex <= filteredList.length) {\r\n      return this.getLocalCustomers(firstIndex, lastIndex, filteredList);\r\n    }\r\n    // return this._loadRandomUsers(itemsPerPage);\r\n    return Promise.reject('Unable to get customers');\r\n  }\r\n\r\n  private async getLocalCustomers(\r\n    firstIndex: number,\r\n    lastIndex: number,\r\n    users: RandomUser[]\r\n  ): Promise<RandomUser[]> {\r\n    return users.slice(firstIndex, lastIndex);\r\n  }\r\n\r\n  private async _loadRandomUsers(\r\n    itemsPerPage: number,\r\n    products: RandomProduct[]\r\n  ): Promise<RandomUser[]> {\r\n    const pageNumber = 1;\r\n    const users = await this.httpClient\r\n      .get<RandomUsers>(\r\n        `https://randomuser.me/api/?page=${pageNumber}&results=${itemsPerPage}`\r\n      )\r\n      .toPromise();\r\n    this._makeRandomPurchases(users.results, products);\r\n    this.users.set('unsorted', [\r\n      ...this.users.get('unsorted')!,\r\n      ...users.results,\r\n    ]);\r\n    this._saveToLocalstorage();\r\n    return users.results;\r\n  }\r\n\r\n  private _makeRandomPurchases(users: RandomUser[], products: RandomProduct[]) {\r\n    this.purchaseService.setPurchaseableIds(products);\r\n    users.forEach((user) =>\r\n      this.purchaseService.setCustomerRandomPurchase(user)\r\n    );\r\n    this.purchaseService.saveToPurchaseHistory(users);\r\n  }\r\n\r\n  private _getListInOrder(sortOrder: Sort): RandomUser[] {\r\n    sortOrder = this._changeSortDirectionIfUnsorted(sortOrder);\r\n    this._sortIfNotExist(sortOrder);\r\n    return this.users.get(`${sortOrder.active}${sortOrder.direction}`)!;\r\n  }\r\n\r\n  private _sortIfNotExist(sortOrder: Sort): void {\r\n    if (!this.users.has(`${sortOrder.active}${sortOrder.direction}`)) {\r\n      this._sortUsers(sortOrder);\r\n    }\r\n  }\r\n\r\n  private _changeSortDirectionIfUnsorted(sort: Sort): Sort {\r\n    if (sort.active === 'unsorted') {\r\n      sort.direction = '';\r\n    }\r\n    return sort;\r\n  }\r\n\r\n  private _saveToLocalstorage(): void {\r\n    localStorage.setItem(\r\n      `customers`,\r\n      JSON.stringify(this.users.get('unsorted'))\r\n    );\r\n  }\r\n\r\n  public loadLocalstorage(): void {\r\n    const customers = localStorage.getItem('customers');\r\n    if (customers)\r\n      this.users.set('unsorted', JSON.parse(customers) as RandomUser[]);\r\n  }\r\n\r\n  private _sortUsers(sort: Sort): void {\r\n    const { active, direction } = sort;\r\n    const unorderedList: RandomUser[] = this.users.get('unsorted')!;\r\n\r\n    this.users.set(\r\n      `${active}${direction}`,\r\n      [...unorderedList].sort((userA, userB) => {\r\n        if (direction === 'asc')\r\n          return this._sortByType(userA, userB, sort.active);\r\n        else return this._sortByType(userB, userA, sort.active);\r\n      })\r\n    );\r\n  }\r\n\r\n  private _sortByType(userA: RandomUser, userB: RandomUser, sortType: string) {\r\n    if (sortType === 'age') return userA.dob.age - userB.dob.age;\r\n    else\r\n      return userA.name.last > userB.name.last\r\n        ? 1\r\n        : userB.name.last > userA.name.last\r\n        ? -1\r\n        : 0;\r\n  }\r\n\r\n  addNewCustomers(customer: RandomUser): void {\r\n    const customers: RandomUser[] = [customer, ...this.users.get('unsorted')!];\r\n    this.resetUsersWithUnsorted(customers);\r\n  }\r\n\r\n  resetUsersWithUnsorted(customers: RandomUser[]) {\r\n    this.users.clear();\r\n    this.users.set('unsorted', customers);\r\n    this._saveToLocalstorage();\r\n  }\r\n\r\n  setCustomersToEdit(customers: RandomUser[]): void {\r\n    this.usersToEdit = customers;\r\n  }\r\n\r\n  customersToEdit(): RandomUser[] {\r\n    return this.usersToEdit!;\r\n  }\r\n\r\n  findAndReplaceEdited(editedCustomers: RandomUser[]): void {\r\n    let unsortedUsers = this.users.get('unsorted')!;\r\n    this.usersToEdit?.forEach((costumer, index) => {\r\n      const indexToEdit = unsortedUsers.findIndex((unsortedCostumer) => {\r\n        return unsortedCostumer.id.value === costumer.id.value;\r\n      });\r\n      unsortedUsers[indexToEdit] = editedCustomers[index];\r\n    });\r\n    this.resetUsersWithUnsorted(unsortedUsers);\r\n  }\r\n\r\n  removeCustomers(customers: RandomUser[]): void {\r\n    let unsortedUsers = this.users.get('unsorted')!;\r\n    customers.map((costumerToRemove) => {\r\n      unsortedUsers = unsortedUsers.filter(\r\n        (costumerInMemory) => costumerInMemory != costumerToRemove\r\n      );\r\n    });\r\n    this.resetUsersWithUnsorted(unsortedUsers);\r\n  }\r\n\r\n  getCustomersAgeRanges(): RangeType {\r\n    const customersAges: number[] = this.users.get('unsorted')!.map((user) => {\r\n      return user.dob.age;\r\n    });\r\n    const minAge = Math.min(...customersAges);\r\n    const maxAge = Math.max(...customersAges);\r\n    return { min: minAge, max: maxAge };\r\n  }\r\n\r\n  getCustomersPurchasesRanges(): RangeType {\r\n    const customers = this.UnsortedUsers;\r\n    const customersPurchasesLength = customers.map(\r\n      (customer): number => customer.purchased?.length!\r\n    );\r\n    return {\r\n      min: Math.min(...customersPurchasesLength),\r\n      max: Math.max(...customersPurchasesLength),\r\n    };\r\n  }\r\n\r\n  getMoneySpentRanges(): RangeType {\r\n    const customers = this.UnsortedUsers;\r\n    const customersMaxSpentList: number[] = customers.map((user) => {\r\n      return user.purchased?.reduce(\r\n        (acc, value) => acc + parseFloat(value.total_cost),\r\n        0\r\n      )!;\r\n    });\r\n    return {\r\n      min: 0,\r\n      max: Math.max(...customersMaxSpentList),\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}