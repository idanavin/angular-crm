{"ast":null,"code":"import { EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport { InputComponent } from '../input.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/form-field\";\nimport * as i2 from \"@angular/material/input\";\nimport * as i3 from \"@angular/material/autocomplete\";\nimport * as i4 from \"../../form-errors/form-errors.component\";\nimport * as i5 from \"@angular/material/core\";\nimport * as i6 from \"@angular/common\";\n\nfunction InputAutocompleteComponent_mat_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", ctx_r1.getStringFromOption(option_r2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.getStringFromOption(option_r2), \" \");\n  }\n}\n\nexport class InputAutocompleteComponent extends InputComponent {\n  constructor() {\n    super();\n    this.options = [];\n    this.emitter = new EventEmitter();\n  }\n\n  ngOnInit() {\n    this._setFilteredOptions();\n  }\n\n  _setFilteredOptions() {\n    var _a;\n\n    this.filteredOptions = (_a = this.formField) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(startWith(''), map(userInput => {\n      var _a;\n\n      if (userInput) {\n        const lowerCaseInput = userInput.toLowerCase();\n\n        const filtered = this._filter(lowerCaseInput);\n\n        this._emitIfEqual(lowerCaseInput);\n\n        return filtered;\n      } else {\n        // this.filtered.emit([]);\n        return (_a = this.options) === null || _a === void 0 ? void 0 : _a.slice();\n      }\n    }));\n  }\n\n  _filter(value) {\n    var _a;\n\n    return (_a = this.options) === null || _a === void 0 ? void 0 : _a.filter(option => {\n      return option.toLowerCase().indexOf(value) === 0;\n    });\n  }\n\n  _emitIfEqual(value) {\n    const option = this.options.find(option => option.toLowerCase() === value);\n\n    if (option) {\n      this.emitter.emit(option);\n    }\n  }\n\n  getStringFromOption(option) {\n    if (typeof option !== \"string\") {\n      return '';\n    }\n\n    return option;\n  }\n\n}\n\nInputAutocompleteComponent.ɵfac = function InputAutocompleteComponent_Factory(t) {\n  return new (t || InputAutocompleteComponent)();\n};\n\nInputAutocompleteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: InputAutocompleteComponent,\n  selectors: [[\"app-input-autocomplete\"]],\n  inputs: {\n    options: \"options\"\n  },\n  outputs: {\n    emitter: \"emitter\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputAutocompleteComponent),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 9,\n  vars: 9,\n  consts: [[\"appearance\", \"outline\"], [\"matInput\", \"\", 3, \"value\", \"disabled\", \"id\", \"matAutocomplete\", \"input\", \"blur\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForIn\"], [3, \"formField\"], [3, \"value\"]],\n  template: function InputAutocompleteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-form-field\", 0);\n      i0.ɵɵelementStart(1, \"mat-label\");\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"input\", 1);\n      i0.ɵɵlistener(\"input\", function InputAutocompleteComponent_Template_input_input_3_listener($event) {\n        return ctx.onChange($event);\n      })(\"blur\", function InputAutocompleteComponent_Template_input_blur_3_listener() {\n        return ctx.touched();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"mat-autocomplete\", null, 2);\n      i0.ɵɵtemplate(6, InputAutocompleteComponent_mat_option_6_Template, 2, 2, \"mat-option\", 3);\n      i0.ɵɵpipe(7, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"app-form-errors\", 4);\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(5);\n\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"value\", ctx.value)(\"disabled\", ctx.isDisabled)(\"id\", ctx.fieldName)(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForIn\", i0.ɵɵpipeBind1(7, 7, ctx.filteredOptions));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formField\", ctx.formField);\n    }\n  },\n  directives: [i1.MatFormField, i1.MatLabel, i2.MatInput, i3.MatAutocompleteTrigger, i3.MatAutocomplete, i4.FormErrorsComponent, i5.MatOption],\n  pipes: [i6.AsyncPipe],\n  styles: [\"mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksV0FBQTtBQUNKIiwiZmlsZSI6ImlucHV0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsibWF0LWZvcm0tZmllbGQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn0iXX0= */\"]\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\src\\app\\shared\\form\\input\\input-autocomplete\\input-autocomplete.component.ts","D:\\Code\\angular-crm\\src\\app\\shared\\form\\input\\input-autocomplete\\input-autocomplete.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { _MatAutocompleteBase } from '@angular/material/autocomplete';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { RandomUser } from 'src/app/domain-layer/entities/random-users';\r\nimport { InputComponent } from '../input.component';\r\n\r\n@Component({\r\n  selector: 'app-input-autocomplete',\r\n  templateUrl: './input-autocomplete.component.html',\r\n  // Same style as input\r\n  styleUrls: ['../input.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(\r\n        () => InputAutocompleteComponent\r\n      ),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class InputAutocompleteComponent extends InputComponent {\r\n\r\n  @Input() options: string[] = [];\r\n\r\n  filteredOptions!: Observable<string[] | RandomUser[]>;\r\n\r\n  @Output() emitter: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  constructor() { \r\n    super();\r\n  }\r\n  \r\n  ngOnInit(): void {\r\n    this._setFilteredOptions()\r\n  }\r\n\r\n  private _setFilteredOptions(): void {\r\n    this.filteredOptions = this.formField?.valueChanges.pipe(\r\n      startWith(''),\r\n      map((userInput) => {\r\n        if (userInput) {\r\n          const lowerCaseInput = userInput.toLowerCase();\r\n          const filtered = this._filter(lowerCaseInput)!;\r\n          this._emitIfEqual(lowerCaseInput)\r\n          return filtered;\r\n        } else {\r\n          // this.filtered.emit([]);\r\n          return this.options?.slice()!;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private _filter(value: string) {\r\n    return this.options?.filter((option) => {\r\n      return option.toLowerCase().indexOf(value) === 0\r\n    });\r\n  }\r\n\r\n  private _emitIfEqual(value: string): void {\r\n    const option = this.options.find((option) => option.toLowerCase() === value)\r\n    if (option) {\r\n      this.emitter.emit(option)\r\n    }\r\n  }\r\n\r\n  getStringFromOption(option: string | RandomUser): string {\r\n    if (typeof option !== \"string\") {\r\n      return ''\r\n    }\r\n    return option\r\n  }\r\n\r\n}\r\n","<mat-form-field appearance=\"outline\">\r\n  <mat-label>{{ label }}</mat-label>\r\n  <input\r\n    matInput\r\n    [value]=\"value\"\r\n    [disabled]=\"isDisabled\"\r\n    (input)=\"onChange($event)\"\r\n    (blur)=\"touched()\"\r\n    [id]=\"fieldName\"\r\n    [matAutocomplete]=\"auto\"\r\n  >\r\n  <mat-autocomplete #auto=\"matAutocomplete\">\r\n    <mat-option *ngFor=\"let option; in filteredOptions | async\" [value]=\"getStringFromOption(option)\">\r\n      {{ getStringFromOption(option) }}\r\n    </mat-option>\r\n  </mat-autocomplete>\r\n</mat-form-field>\r\n<app-form-errors [formField]=\"formField\"></app-form-errors>\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}