{"ast":null,"code":"import _asyncToGenerator from \"D:/Code/angular-crm/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./products.service\";\nimport * as i2 from \"./local-save.service\";\nexport class PurchaseService {\n  constructor(productsService, localSaveService) {\n    this.productsService = productsService;\n    this.localSaveService = localSaveService;\n    this.purchasableIds = [];\n    this.purchaseHistory = this.localSaveService.loadPurchaseHistory();\n  }\n\n  getPurchasableIds() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this.productsService.getPurchasableIds().then(ids => ids);\n    })();\n  }\n\n  setPurchaseableIds(products) {\n    this.purchasableIds = products.map(product => product.id);\n  }\n\n  setCustomerRandomPurchase(customer) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.purchasableIds.length === 0) {\n        _this2.purchasableIds = yield _this2.getPurchasableIds();\n      }\n\n      const randomAmountOfPurchases = Math.floor(Math.random() * 10);\n      customer.purchased = [];\n\n      for (let i = 0; i < randomAmountOfPurchases; i++) {\n        const randomPurchase = _this2._getRandomPurchase(customer.email);\n\n        _this2._makeAPurchase(customer, randomPurchase);\n      }\n    })();\n  }\n\n  _makeAPurchase(customer, purchasedObject) {\n    var _a;\n\n    (_a = customer.purchased) === null || _a === void 0 ? void 0 : _a.push(purchasedObject);\n    this.productsService.increasePurchaseCounter(purchasedObject.product_id);\n  }\n\n  _getRandomPurchase(customerEmail) {\n    const randomIndex = Math.floor(Math.random() * this.purchasableIds.length);\n    const productId = this.purchasableIds[randomIndex];\n    const price = this.productsService.getProductPrice(productId);\n    return {\n      customer_email: customerEmail,\n      product_id: productId,\n      date: this._getRandomDate(),\n      total_cost: price ? price : ''\n    };\n  }\n\n  _getRandomDate() {\n    const date = new Date();\n    const nowDay = date.getDay();\n    const nowMonth = date.getMonth();\n    const randomPastDay = Math.floor(Math.random() * nowDay);\n    const randomPastMonth = Math.floor(Math.random() * nowMonth);\n    date.setDate(randomPastDay ? randomPastDay : 1);\n    date.setMonth(randomPastMonth ? randomPastMonth : 1);\n    return date;\n  }\n\n  getOrderList() {\n    if (this.purchaseHistory === []) {\n      this.purchaseHistory = this.localSaveService.loadPurchaseHistory();\n    }\n\n    return this.purchaseHistory;\n  }\n\n  saveToPurchaseHistory(users) {\n    var _a;\n\n    const unsortedPurchasedList = this._getPurchaseList(users);\n\n    (_a = this.purchaseHistory) === null || _a === void 0 ? void 0 : _a.push(...unsortedPurchasedList);\n    this.purchaseHistory = this._sortListByDate(this.purchaseHistory);\n    this.localSaveService.saveToLocal('purchaseHistory', this.purchaseHistory);\n  }\n\n  _getPurchaseList(users) {\n    const purchasedList = users.reduce((acc, curr) => {\n      curr.purchased && acc.push(...curr.purchased);\n      return acc;\n    }, []); // users.forEach((user) => {\n    //   purchasedList.push(...user.purchased!);\n    // });\n\n    return purchasedList;\n  }\n\n  _sortListByDate(purchased) {\n    return purchased.sort((purchasedA, purchasedB) => {\n      return purchasedA.date > purchasedB.date ? -1 : purchasedB.date > purchasedA.date ? 1 : 0;\n    });\n  }\n\n}\n\nPurchaseService.ɵfac = function PurchaseService_Factory(t) {\n  return new (t || PurchaseService)(i0.ɵɵinject(i1.ProductsService), i0.ɵɵinject(i2.LocalSaveService));\n};\n\nPurchaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PurchaseService,\n  factory: PurchaseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\client\\src\\app\\services\\purchase.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  Id,\r\n  Purchased,\r\n  RandomUser,\r\n} from '../domain-layer/entities/random-users';\r\nimport { RandomProduct } from '../interface/product';\r\nimport { LocalSaveService } from './local-save.service';\r\nimport { ProductsService } from './products.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PurchaseService {\r\n  purchasableIds: number[] = [];\r\n  purchaseHistory: Purchased[];\r\n\r\n  constructor(\r\n    private readonly productsService: ProductsService,\r\n    private localSaveService: LocalSaveService\r\n  ) {\r\n    this.purchaseHistory = this.localSaveService.loadPurchaseHistory();\r\n  }\r\n\r\n  async getPurchasableIds(): Promise<number[]> {\r\n    return await this.productsService.getPurchasableIds().then((ids) => ids);\r\n  }\r\n\r\n  setPurchaseableIds(products: RandomProduct[]) {\r\n    this.purchasableIds = products.map((product) => product.id)\r\n  }\r\n\r\n  async setCustomerRandomPurchase(customer: RandomUser) {\r\n    if (this.purchasableIds.length === 0) {\r\n      this.purchasableIds = await this.getPurchasableIds();\r\n    }\r\n    const randomAmountOfPurchases = Math.floor(Math.random() * 10);\r\n    customer.purchased = [];\r\n    for (let i = 0; i < randomAmountOfPurchases; i++) {\r\n      const randomPurchase = this._getRandomPurchase(customer.email);\r\n      this._makeAPurchase(customer, randomPurchase);\r\n    }\r\n  }\r\n\r\n  private _makeAPurchase(\r\n    customer: RandomUser,\r\n    purchasedObject: Purchased\r\n  ): void {\r\n    customer.purchased?.push(purchasedObject);\r\n    this.productsService.increasePurchaseCounter(purchasedObject.product_id);\r\n  }\r\n\r\n  private _getRandomPurchase(customerEmail: string): Purchased {\r\n    const randomIndex = Math.floor(Math.random() * this.purchasableIds.length);\r\n    const productId = this.purchasableIds[randomIndex];\r\n    const price = this.productsService.getProductPrice(productId);\r\n\r\n    return {\r\n      customer_email: customerEmail,\r\n      product_id: productId,\r\n      date: this._getRandomDate(),\r\n      total_cost: price ? price : '',\r\n    };\r\n  }\r\n\r\n  private _getRandomDate(): Date {\r\n    const date = new Date();\r\n    const nowDay = date.getDay();\r\n    const nowMonth = date.getMonth();\r\n    const randomPastDay = Math.floor(Math.random() * nowDay);\r\n    const randomPastMonth = Math.floor(Math.random() * nowMonth);\r\n    date.setDate(randomPastDay ? randomPastDay : 1);\r\n    date.setMonth(randomPastMonth ? randomPastMonth : 1);\r\n    return date;\r\n  }\r\n\r\n  getOrderList(): Purchased[] {\r\n    if (this.purchaseHistory === []) {\r\n      this.purchaseHistory = this.localSaveService.loadPurchaseHistory();\r\n    }\r\n    return this.purchaseHistory\r\n  }\r\n\r\n  saveToPurchaseHistory(users: RandomUser[]) {\r\n    const unsortedPurchasedList = this._getPurchaseList(users);\r\n    this.purchaseHistory?.push(...unsortedPurchasedList);\r\n    this.purchaseHistory = this._sortListByDate(this.purchaseHistory);\r\n    this.localSaveService.saveToLocal('purchaseHistory', this.purchaseHistory);\r\n  }\r\n\r\n  private _getPurchaseList(users: RandomUser[]): Purchased[] {\r\n    const purchasedList: Purchased[] = users.reduce((acc: Purchased[], curr) => {\r\n      curr.purchased && acc.push(...curr.purchased);\r\n      return acc;\r\n    }, []);\r\n\r\n    // users.forEach((user) => {\r\n    //   purchasedList.push(...user.purchased!);\r\n    // });\r\n    return purchasedList;\r\n  }\r\n\r\n  private _sortListByDate(purchased: Purchased[]): Purchased[] {\r\n    return purchased.sort((purchasedA, purchasedB) => {\r\n      return purchasedA.date > purchasedB.date\r\n        ? -1\r\n        : purchasedB.date > purchasedA.date\r\n        ? 1\r\n        : 0;\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}