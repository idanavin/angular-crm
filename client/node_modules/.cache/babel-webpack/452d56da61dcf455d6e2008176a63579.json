{"ast":null,"code":"import _asyncToGenerator from \"D:/Code/angular-crm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./local-save.service\";\nexport class ProductsService {\n  constructor(httpClient, localSaveService) {\n    this.httpClient = httpClient;\n    this.localSaveService = localSaveService;\n    this.categories = this.localSaveService.loadCategories();\n  }\n\n  getProductsAndCategories(amountOfProducts = 20) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const products = yield _this.getProducts(amountOfProducts);\n      return [products, _this.categories];\n    })();\n  }\n\n  getProducts(amount = 20) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.loadProducts();\n\n      if (!_this2.products) {\n        yield _this2._setProducts(amount);\n      }\n\n      return _this2.products;\n    })();\n  }\n\n  _setProducts(amount = 20) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3._getAmountOfProducts(amount).then(products => {\n        _this3.products = products;\n\n        _this3.setCategories(products);\n\n        _this3.localSaveService.saveToLocal('products', products);\n      });\n    })();\n  }\n\n  getPurchasableIds() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      if (!_this4.products) {\n        yield _this4._setProducts();\n      }\n\n      return (_a = _this4.products) === null || _a === void 0 ? void 0 : _a.map(product => product.id);\n    })();\n  }\n\n  getProductPrice(productId) {\n    var _a;\n\n    const product = (_a = this.products) === null || _a === void 0 ? void 0 : _a.find(product => product.id === productId);\n\n    try {\n      return product.price;\n    } catch (_b) {\n      throw product;\n    }\n  }\n\n  loadProducts() {\n    const products = this.localSaveService.loadProducts();\n\n    if (products) {\n      this.products = products;\n    }\n  }\n\n  setCategories(products) {\n    products.map(product => {\n      var _a;\n\n      const category = (_a = this.categories) === null || _a === void 0 ? void 0 : _a.find(category => category === product.category);\n\n      if (!category) {\n        this.categories.push(product.category);\n      }\n    });\n    this.localSaveService.saveToLocal('product_categories', this.categories);\n  }\n\n  _getAmountOfProducts(amount = 20) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const products = yield _this5.httpClient.get(`https://fakestoreapi.com/products?limit=${amount}`).toPromise();\n      products.forEach(product => product.purchased = 0);\n      return products;\n    })();\n  }\n\n  increasePurchaseCounter(productId) {\n    var _a;\n\n    const productIndex = (_a = this.products) === null || _a === void 0 ? void 0 : _a.findIndex(product => product.id === productId);\n\n    if (this.products && productIndex) {\n      this.products[productIndex].purchased += 1;\n    }\n  }\n\n}\n\nProductsService.ɵfac = function ProductsService_Factory(t) {\n  return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalSaveService));\n};\n\nProductsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductsService,\n  factory: ProductsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\src\\app\\services\\products.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { RandomProduct } from '../interface/product';\nimport { LocalSaveService } from './local-save.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductsService {\n  products?: RandomProduct[];\n  categories: string[];\n\n  constructor(\n    private httpClient: HttpClient,\n    private localSaveService: LocalSaveService\n  ) {\n    this.categories = this.localSaveService.loadCategories();\n  }\n\n  async getProductsAndCategories(amountOfProducts: number = 20) {\n    const products = await this.getProducts(amountOfProducts);\n    return [products, this.categories]\n  }\n\n  async getProducts(amount: number = 20): Promise<RandomProduct[]> {\n    this.loadProducts();\n    if (!this.products) {\n      await this._setProducts(amount);\n    }\n    return this.products!;\n  }\n\n  private async _setProducts(amount: number = 20) {\n    await this._getAmountOfProducts(amount).then((products) => {\n      this.products = products;\n      this.setCategories(products);\n      this.localSaveService.saveToLocal('products', products);\n    });\n  }\n\n  async getPurchasableIds(): Promise<number[]> {\n    if (!this.products) {\n      await this._setProducts();\n    }\n    return this.products?.map((product) => product.id)!;\n  }\n\n  getProductPrice(productId: number): string {\n    const product = this.products?.find(product => product.id === productId)\n    try {\n      return product!.price\n    } catch {\n      throw product\n    }\n\n  }\n\n  loadProducts() {\n    const products = this.localSaveService.loadProducts();\n    if (products) {\n      this.products = products;\n    }\n  }\n\n  setCategories(products: RandomProduct[]) {\n    products.map((product) => {\n      const category = this.categories?.find(\n        (category) => category === product.category\n      );\n      if (!category) {\n        this.categories.push(product.category);\n      }\n    });\n    this.localSaveService.saveToLocal('product_categories', this.categories);\n  }\n\n  private async _getAmountOfProducts(\n    amount: number = 20\n  ): Promise<RandomProduct[]> {\n    const products = await this.httpClient\n      .get<RandomProduct[]>(`https://fakestoreapi.com/products?limit=${amount}`)\n      .toPromise();\n    products.forEach((product) => product.purchased = 0);\n    return products;\n  }\n\n  increasePurchaseCounter(productId: number) {\n    const productIndex = this.products?.findIndex(product => product.id === productId);\n    if (this.products && productIndex) {\n      this.products[productIndex].purchased! += 1\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}