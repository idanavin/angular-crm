{"ast":null,"code":"import _asyncToGenerator from \"D:/Code/angular-crm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductsService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n\n  getProducts(amount) {\n    if (!this.products) {\n      this._getAmountOfProducts(amount).then(products => this.products = products);\n    }\n\n    return this.products;\n  }\n\n  _getAmountOfProducts(amount = 20) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const products = yield _this.httpClient.get(`https://fakestoreapi.com/products?limit=${amount}`).toPromise();\n      return products;\n    })();\n  }\n\n}\n\nProductsService.ɵfac = function ProductsService_Factory(t) {\n  return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nProductsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductsService,\n  factory: ProductsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\src\\app\\services\\products.service.ts"],"names":[],"mappings":";;;AAOA,OAAM,MAAO,eAAP,CAAsB;AAG1B,EAAA,WAAA,CAAoB,UAApB,EAA0C;AAAtB,SAAA,UAAA,GAAA,UAAA;AAA0B;;AAE9C,EAAA,WAAW,CAAC,MAAD,EAAe;AACxB,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,WAAK,oBAAL,CAA0B,MAA1B,EAAkC,IAAlC,CACG,QAAD,IAAe,KAAK,QAAL,GAAgB,QADjC;AAGD;;AACD,WAAO,KAAK,QAAZ;AACD;;AAEa,EAAA,oBAAoB,CAAC,MAAA,GAAiB,EAAlB,EAAoB;AAAA;;AAAA;AACpD,YAAM,QAAQ,SAAS,KAAI,CAAC,UAAL,CACpB,GADoB,CACC,2CAA2C,MAAM,EADlD,EAEpB,SAFoB,EAAvB;AAGA,aAAO,QAAP;AAJoD;AAKrD;;AAnByB;;;mBAAf,e,EAAe,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAf,e;AAAe,EAAA,OAAA,EAAf,eAAe,CAAA,I;AAAA,EAAA,UAAA,EAFd","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { RandomProduct } from '../interface/product';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductsService {\n  products?: RandomProduct[];\n\n  constructor(private httpClient: HttpClient) {}\n\n  getProducts(amount: number): RandomProduct[] {\n    if (!this.products) {\n      this._getAmountOfProducts(amount).then(\n        (products) => (this.products = products)\n      );\n    }\n    return this.products!\n  }\n\n  private async _getAmountOfProducts(amount: number = 20) {\n    const products = await this.httpClient\n      .get<RandomProduct[]>(`https://fakestoreapi.com/products?limit=${amount}`)\n      .toPromise();\n    return products;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}