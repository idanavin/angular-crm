{"ast":null,"code":"import _asyncToGenerator from \"D:/Code/angular-crm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./purchase.service\";\nexport class CustomersService {\n  constructor(httpClient, purchaseService) {\n    this.httpClient = httpClient;\n    this.purchaseService = purchaseService;\n    this.users = new Map();\n    this.users.set('unsorted', []);\n  }\n\n  get UnsortedUsers() {\n    return this.users.get('unsorted');\n  }\n\n  getCustomersByPage(itemsPerPage, page, order) {\n    const lastIndex = itemsPerPage * (page + 1);\n    const firstIndex = lastIndex - itemsPerPage;\n\n    const list = this._getListInOrder(order);\n\n    if (lastIndex <= list.length) {\n      return this.getLocalCustomers(firstIndex, lastIndex, list);\n    }\n\n    return this._loadRandomUsers(itemsPerPage);\n  }\n\n  getLocalCustomers(firstIndex, lastIndex, users) {\n    return _asyncToGenerator(function* () {\n      return users.slice(firstIndex, lastIndex);\n    })();\n  }\n\n  _loadRandomUsers(itemsPerPage) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const pageNumber = 1;\n      const users = yield _this.httpClient.get(`https://randomuser.me/api/?page=${pageNumber}&results=${itemsPerPage}`).toPromise();\n\n      _this._makeRandomPurchases(users.results);\n\n      _this.users.set('unsorted', [..._this.users.get('unsorted'), ...users.results]);\n\n      _this._saveToLocalstorage();\n\n      return users.results;\n    })();\n  }\n\n  _makeRandomPurchases(users) {\n    users.forEach(user => this.purchaseService.setCustomerRandomPurchase(user));\n  }\n\n  _getListInOrder(sortOrder) {\n    sortOrder = this._changeSortDirectionIfUnsorted(sortOrder);\n\n    this._sortIfNotExist(sortOrder);\n\n    return this.users.get(`${sortOrder.active}${sortOrder.direction}`);\n  }\n\n  _sortIfNotExist(sortOrder) {\n    if (!this.users.has(`${sortOrder.active}${sortOrder.direction}`)) {\n      this._sortUsers(sortOrder);\n    }\n  }\n\n  _changeSortDirectionIfUnsorted(sort) {\n    if (sort.active === \"unsorted\") {\n      sort.direction = \"\";\n    }\n\n    return sort;\n  }\n\n  _saveToLocalstorage() {\n    localStorage.setItem(`customers`, JSON.stringify(this.users.get('unsorted')));\n  }\n\n  loadLocalstorage() {\n    const customers = localStorage.getItem('customers');\n    if (customers) this.users.set('unsorted', JSON.parse(customers));\n  }\n\n  _sortUsers(sort) {\n    const {\n      active,\n      direction\n    } = sort;\n    const unorderedList = this.users.get('unsorted');\n    this.users.set(`${active}${direction}`, [...unorderedList].sort((userA, userB) => {\n      if (direction === 'asc') return this._sortByType(userA, userB, sort.active);else return this._sortByType(userB, userA, sort.active);\n    }));\n  }\n\n  _sortByType(userA, userB, sortType) {\n    if (sortType === 'age') return userA.dob.age - userB.dob.age;else return userA.name.last > userB.name.last ? 1 : userB.name.last > userA.name.last ? -1 : 0;\n  }\n\n  addNewCustomers(customer) {\n    const customers = [customer, ...this.users.get('unsorted')];\n    this.resetUsersWithUnsorted(customers);\n  }\n\n  resetUsersWithUnsorted(customers) {\n    this.users.clear();\n    this.users.set('unsorted', customers);\n\n    this._saveToLocalstorage();\n  }\n\n  setCustomersToEdit(customers) {\n    this.usersToEdit = customers;\n  }\n\n  customersToEdit() {\n    return this.usersToEdit;\n  }\n\n  findAndReplaceEdited(editedCustomers) {\n    var _a;\n\n    let unsortedUsers = this.users.get('unsorted');\n    (_a = this.usersToEdit) === null || _a === void 0 ? void 0 : _a.forEach((costumer, index) => {\n      const indexToEdit = unsortedUsers.findIndex(unsortedCostumer => {\n        return unsortedCostumer.id.value === costumer.id.value;\n      });\n      unsortedUsers[indexToEdit] = editedCustomers[index];\n    });\n    this.resetUsersWithUnsorted(unsortedUsers);\n  }\n\n  removeCustomers(customers) {\n    let unsortedUsers = this.users.get('unsorted');\n    customers.map(costumerToRemove => {\n      unsortedUsers = unsortedUsers.filter(costumerInMemory => costumerInMemory != costumerToRemove);\n    });\n    this.resetUsersWithUnsorted(unsortedUsers);\n  }\n\n}\n\nCustomersService.ɵfac = function CustomersService_Factory(t) {\n  return new (t || CustomersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.PurchaseService));\n};\n\nCustomersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CustomersService,\n  factory: CustomersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\src\\app\\services\\customers.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { RandomUser, RandomUsers } from '../domain-layer/entities/random-users';\r\nimport { PurchaseService } from './purchase.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CustomersService {\r\n\r\n  usersToEdit?: RandomUser[]\r\n  users: Map<string, RandomUser[]> = new Map<\r\n    string,\r\n    RandomUser[]\r\n  >();\r\n\r\n  constructor(private readonly httpClient: HttpClient, private purchaseService: PurchaseService) {\r\n    this.users.set('unsorted', [])\r\n  }\r\n\r\n  get UnsortedUsers(): RandomUser[] {\r\n    return this.users.get('unsorted')!\r\n  }\r\n\r\n  getCustomersByPage(itemsPerPage: number, page: number, order: Sort): Promise<RandomUser[]> {\r\n    const lastIndex = itemsPerPage * (page + 1);\r\n    const firstIndex = lastIndex - itemsPerPage;\r\n    const list: RandomUser[] = this._getListInOrder(order);\r\n\r\n    if (lastIndex <= list.length) {\r\n      return this.getLocalCustomers(firstIndex, lastIndex, list);\r\n    }\r\n    return this._loadRandomUsers(itemsPerPage)\r\n  }\r\n\r\n  private async getLocalCustomers(firstIndex: number, lastIndex: number, users: RandomUser[]): Promise<RandomUser[]> {\r\n    return users.slice(firstIndex, lastIndex);\r\n  }\r\n\r\n  private async _loadRandomUsers(itemsPerPage: number): Promise<RandomUser[]> {\r\n    const pageNumber = 1;\r\n    const users = await this.httpClient\r\n      .get<RandomUsers>(\r\n        `https://randomuser.me/api/?page=${pageNumber}&results=${itemsPerPage}`\r\n      )\r\n      .toPromise();\r\n    this._makeRandomPurchases(users.results);\r\n    this.users.set('unsorted', [... this.users.get('unsorted')!, ...users.results])\r\n    this._saveToLocalstorage();\r\n    return users.results\r\n  }\r\n\r\n  private _makeRandomPurchases(users: RandomUser[]) {\r\n    users.forEach(user => this.purchaseService.setCustomerRandomPurchase(user))\r\n  }\r\n\r\n  private _getListInOrder(sortOrder: Sort): RandomUser[] {\r\n    sortOrder = this._changeSortDirectionIfUnsorted(sortOrder)\r\n    this._sortIfNotExist(sortOrder);\r\n    return this.users.get(`${sortOrder.active}${sortOrder.direction}`)!\r\n  }\r\n\r\n  private _sortIfNotExist(sortOrder: Sort): void {\r\n    if (!this.users.has(`${sortOrder.active}${sortOrder.direction}`)) {\r\n      this._sortUsers(sortOrder)\r\n    }\r\n  }\r\n\r\n  private _changeSortDirectionIfUnsorted(sort: Sort): Sort {\r\n    if (sort.active === \"unsorted\") {\r\n      sort.direction = \"\";\r\n    }\r\n    return sort\r\n  }\r\n\r\n  private _saveToLocalstorage(): void {\r\n    localStorage.setItem(`customers`, JSON.stringify(this.users.get('unsorted')))\r\n  }\r\n\r\n  public loadLocalstorage(): void {\r\n    const customers = localStorage.getItem('customers')\r\n    if (customers) this.users.set('unsorted', JSON.parse(customers) as RandomUser[])\r\n  }\r\n\r\n  private _sortUsers(sort: Sort): void {\r\n    const { active, direction } = sort\r\n    const unorderedList: RandomUser[] = this.users.get('unsorted')!;\r\n    \r\n    this.users.set(`${active}${direction}`, [...unorderedList].sort((userA, userB) => {\r\n      if (direction === 'asc') return this._sortByType(userA, userB, sort.active);\r\n      else return this._sortByType(userB, userA, sort.active);\r\n    }))\r\n  }\r\n\r\n  private _sortByType(userA: RandomUser, userB: RandomUser, sortType: string) {\r\n    if (sortType === 'age') return userA.dob.age - userB.dob.age\r\n    else return (userA.name.last > userB.name.last) ? 1 : ((userB.name.last > userA.name.last) ? -1 : 0)\r\n  }\r\n\r\n  addNewCustomers(customer: RandomUser): void {\r\n    const customers: RandomUser[] = [customer, ...this.users.get('unsorted')!];\r\n    this.resetUsersWithUnsorted(customers)\r\n  }\r\n\r\n  resetUsersWithUnsorted(customers: RandomUser[]) {\r\n    this.users.clear();\r\n    this.users.set('unsorted', customers);\r\n    this._saveToLocalstorage();\r\n  }\r\n\r\n  setCustomersToEdit(customers: RandomUser[]): void {\r\n    this.usersToEdit = customers;\r\n  }\r\n\r\n  customersToEdit(): RandomUser[] {\r\n    return this.usersToEdit!\r\n  }\r\n\r\n  findAndReplaceEdited(editedCustomers: RandomUser[]): void {\r\n    let unsortedUsers = this.users.get('unsorted')!;\r\n    this.usersToEdit?.forEach((costumer, index) => {\r\n      const indexToEdit = unsortedUsers.findIndex((unsortedCostumer) => {\r\n        return unsortedCostumer.id.value === costumer.id.value\r\n      })\r\n      unsortedUsers[indexToEdit] = editedCustomers[index];\r\n    })\r\n    this.resetUsersWithUnsorted(unsortedUsers);\r\n  }\r\n\r\n  removeCustomers(customers: RandomUser[]): void {\r\n    let unsortedUsers = this.users.get('unsorted')!;\r\n    customers.map((costumerToRemove) => {\r\n      unsortedUsers = unsortedUsers.filter((costumerInMemory) => costumerInMemory != costumerToRemove)\r\n    })\r\n    this.resetUsersWithUnsorted(unsortedUsers)\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}