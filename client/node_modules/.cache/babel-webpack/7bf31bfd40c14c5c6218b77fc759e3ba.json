{"ast":null,"code":"import _asyncToGenerator from \"D:/Code/angular-crm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { costumers } from '../data/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CostumersService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.pageUsers = new Map();\n    this._costumers = costumers;\n  }\n\n  get getCostumersLength() {\n    return this._costumers.length;\n  }\n\n  getAmountOfCostumersByPage(amount, page) {\n    let costumersList = [];\n    const endIndex = amount * (page + 1);\n    const startingIndex = endIndex - amount;\n\n    for (let i = startingIndex; i < this._costumers.length && i < endIndex; i++) {\n      costumersList.push(this._costumers[i]);\n    }\n\n    return costumersList;\n  }\n\n  loadRandomUsers(itemsPerPage, pageNumber) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      if (_this.pageUsers.has(pageNumber) && ((_a = _this.pageUsers.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.length) === itemsPerPage) return _this.pageUsers.get(pageNumber);\n      const users = yield _this.httpClient.get(`https://randomuser.me/api/?page=${pageNumber}&results=${itemsPerPage}`).toPromise();\n      console.log({\n        users\n      });\n\n      _this.pageUsers.set(pageNumber, users.results);\n\n      return users.results;\n    })();\n  }\n\n}\n\nCostumersService.ɵfac = function CostumersService_Factory(t) {\n  return new (t || CostumersService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nCostumersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CostumersService,\n  factory: CostumersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\src\\app\\services\\costumers.service.ts"],"names":[],"mappings":";AAEA,SAAS,SAAT,QAA0B,cAA1B;;;AAMA,OAAM,MAAO,gBAAP,CAAuB;AAQ3B,EAAA,WAAA,CAA6B,UAA7B,EAAmD;AAAtB,SAAA,UAAA,GAAA,UAAA;AALpB,SAAA,SAAA,GAAuC,IAAI,GAAJ,EAAvC;AAMP,SAAK,UAAL,GAAkB,SAAlB;AACD;;AAEqB,MAAlB,kBAAkB,GAAA;AACpB,WAAO,KAAK,UAAL,CAAgB,MAAvB;AACD;;AAED,EAAA,0BAA0B,CAAC,MAAD,EAAiB,IAAjB,EAA6B;AACrD,QAAI,aAAa,GAAU,EAA3B;AACA,UAAM,QAAQ,GAAG,MAAM,IAAI,IAAI,GAAG,CAAX,CAAvB;AACA,UAAM,aAAa,GAAG,QAAQ,GAAG,MAAjC;;AACA,SACE,IAAI,CAAC,GAAG,aADV,EAEE,CAAC,GAAG,KAAK,UAAL,CAAgB,MAApB,IAA8B,CAAC,GAAG,QAFpC,EAGE,CAAC,EAHH,EAIE;AACA,MAAA,aAAa,CAAC,IAAd,CAAmB,KAAK,UAAL,CAAgB,CAAhB,CAAnB;AACD;;AACD,WAAO,aAAP;AACD;;AAEK,EAAA,eAAe,CACnB,YADmB,EAEnB,UAFmB,EAED;AAAA;;AAAA;;;AAElB,UAAI,KAAI,CAAC,SAAL,CAAe,GAAf,CAAmB,UAAnB,KAAkC,CAAA,CAAA,EAAA,GAAA,KAAI,CAAC,SAAL,CAAe,GAAf,CAAmB,UAAnB,CAAA,MAA8B,IAA9B,IAA8B,EAAA,KAAA,KAAA,CAA9B,GAA8B,KAAA,CAA9B,GAA8B,EAAA,CAAE,MAAhC,MAA2C,YAAjF,EAA+F,OAAO,KAAI,CAAC,SAAL,CAAe,GAAf,CAAmB,UAAnB,CAAP;AAE/F,YAAM,KAAK,SAAS,KAAI,CAAC,UAAL,CACjB,GADiB,CAEhB,mCAAmC,UAAU,YAAY,YAAY,EAFrD,EAIjB,SAJiB,EAApB;AAKA,MAAA,OAAO,CAAC,GAAR,CAAY;AAAE,QAAA;AAAF,OAAZ;;AAEA,MAAA,KAAI,CAAC,SAAL,CAAe,GAAf,CAAmB,UAAnB,EAA+B,KAAK,CAAC,OAArC;;AACA,aAAO,KAAK,CAAC,OAAb;AAZkB;AAanB;;AA7C0B;;;mBAAhB,gB,EAAgB,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAhB,gB;AAAgB,EAAA,OAAA,EAAhB,gBAAgB,CAAA,I;AAAA,EAAA,UAAA,EAFf","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { costumers } from '../data/data';\r\nimport { RandomUser, RandomUsers } from '../domain-layer/entities/random-users';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CostumersService {\r\n  private _costumers: Object[];\r\n\r\n  readonly pageUsers: Map<number, RandomUser[]> = new Map<\r\n    number,\r\n    RandomUser[]\r\n  >();\r\n\r\n  constructor(private readonly httpClient: HttpClient) {\r\n    this._costumers = costumers;\r\n  }\r\n\r\n  get getCostumersLength(): number {\r\n    return this._costumers.length;\r\n  }\r\n\r\n  getAmountOfCostumersByPage(amount: number, page: number) {\r\n    let costumersList: any[] = [];\r\n    const endIndex = amount * (page + 1);\r\n    const startingIndex = endIndex - amount;\r\n    for (\r\n      let i = startingIndex;\r\n      i < this._costumers.length && i < endIndex;\r\n      i++\r\n    ) {\r\n      costumersList.push(this._costumers[i]);\r\n    }\r\n    return costumersList;\r\n  }\r\n\r\n  async loadRandomUsers(\r\n    itemsPerPage: number,\r\n    pageNumber: number\r\n  ): Promise<RandomUser[]> {\r\n    if (this.pageUsers.has(pageNumber) && this.pageUsers.get(pageNumber)?.length === itemsPerPage) return this.pageUsers.get(pageNumber)!;\r\n\r\n    const users = await this.httpClient\r\n      .get<RandomUsers>(\r\n        `https://randomuser.me/api/?page=${pageNumber}&results=${itemsPerPage}`\r\n      )\r\n      .toPromise();\r\n    console.log({ users });\r\n\r\n    this.pageUsers.set(pageNumber, users.results);\r\n    return users.results;\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}