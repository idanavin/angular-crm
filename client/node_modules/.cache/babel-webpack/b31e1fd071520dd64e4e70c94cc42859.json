{"ast":null,"code":"import _asyncToGenerator from \"D:/Code/angular-crm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./products.service\";\nexport class PurchaseService {\n  constructor(productsService) {\n    this.productsService = productsService;\n    this.purchasableIds = [];\n  }\n\n  getPurchasableIds() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this.productsService.getPurchasableIds().then(ids => ids);\n    })();\n  }\n\n  setCustomerRandomPurchase(customer) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.purchasableIds.length === 0) {\n        _this2.purchasableIds = yield _this2.getPurchasableIds();\n      }\n\n      const randomAmountOfPurchases = Math.floor(Math.random() * 10);\n      customer.purchased = [];\n\n      for (let i = 0; i < randomAmountOfPurchases; i++) {\n        const randomPurchase = _this2._getRandomPurchase();\n\n        _this2._makeAPurchase(customer, randomPurchase);\n      }\n    })();\n  }\n\n  _makeAPurchase(customer, purchasedObject) {\n    var _a;\n\n    (_a = customer.purchased) === null || _a === void 0 ? void 0 : _a.push(purchasedObject);\n    this.productsService.increasePurchaseCounter(purchasedObject.id);\n  }\n\n  _getRandomPurchase() {\n    const randomIndex = Math.floor(Math.random() * this.purchasableIds.length);\n    const productId = this.purchasableIds[randomIndex];\n    const price = this.productsService.getProductPrice(productId);\n    return {\n      id: productId,\n      date: this.getRandomDate(),\n      total_cost: price ? price : ''\n    };\n  }\n\n  getRandomDate() {\n    const date = new Date();\n    const nowDay = date.getDay();\n    const nowMonth = date.getMonth();\n    const randomPastDay = Math.floor(Math.random() * nowDay);\n    const randomPastMonth = Math.floor(Math.random() * nowMonth);\n    date.setDate(randomPastDay ? randomPastDay : 1);\n    date.setMonth(randomPastMonth ? randomPastMonth : 1);\n    return date;\n  }\n\n}\n\nPurchaseService.ɵfac = function PurchaseService_Factory(t) {\n  return new (t || PurchaseService)(i0.ɵɵinject(i1.ProductsService));\n};\n\nPurchaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PurchaseService,\n  factory: PurchaseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:\\Code\\angular-crm\\src\\app\\services\\purchase.service.ts"],"names":[],"mappings":";;;AASA,OAAM,MAAO,eAAP,CAAsB;AAG1B,EAAA,WAAA,CAA6B,eAA7B,EAA6D;AAAhC,SAAA,eAAA,GAAA,eAAA;AAF7B,SAAA,cAAA,GAA2B,EAA3B;AAEiE;;AAE3D,EAAA,iBAAiB,GAAA;AAAA;;AAAA;AACrB,mBAAa,KAAI,CAAC,eAAL,CACV,iBADU,GAEV,IAFU,CAEJ,GAAD,IAAS,GAFJ,CAAb;AADqB;AAItB;;AAEK,EAAA,yBAAyB,CAAC,QAAD,EAAqB;AAAA;;AAAA;AAClD,UAAI,MAAI,CAAC,cAAL,CAAoB,MAApB,KAA+B,CAAnC,EAAsC;AACpC,QAAA,MAAI,CAAC,cAAL,SAA4B,MAAI,CAAC,iBAAL,EAA5B;AACD;;AACD,YAAM,uBAAuB,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,EAA3B,CAAhC;AACA,MAAA,QAAQ,CAAC,SAAT,GAAqB,EAArB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,uBAApB,EAA6C,CAAC,EAA9C,EAAkD;AAChD,cAAM,cAAc,GAAG,MAAI,CAAC,kBAAL,EAAvB;;AACA,QAAA,MAAI,CAAC,cAAL,CAAoB,QAApB,EAA8B,cAA9B;AACD;AATiD;AAUnD;;AAEO,EAAA,cAAc,CAAC,QAAD,EAAuB,eAAvB,EAAiD;;;AACrE,KAAA,EAAA,GAAA,QAAQ,CAAC,SAAT,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,IAAF,CAAO,eAAP,CAAlB;AACA,SAAK,eAAL,CAAqB,uBAArB,CAA6C,eAAe,CAAC,EAA7D;AACD;;AAEO,EAAA,kBAAkB,GAAA;AACxB,UAAM,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,KAAK,cAAL,CAAoB,MAA/C,CAApB;AACA,UAAM,SAAS,GAAG,KAAK,cAAL,CAAoB,WAApB,CAAlB;AACA,UAAM,KAAK,GAAG,KAAK,eAAL,CAAqB,eAArB,CAAqC,SAArC,CAAd;AAEA,WAAO;AACL,MAAA,EAAE,EAAE,SADC;AAEL,MAAA,IAAI,EAAE,KAAK,aAAL,EAFD;AAGL,MAAA,UAAU,EAAE,KAAK,GAAG,KAAH,GAAW;AAHvB,KAAP;AAKD;;AAED,EAAA,aAAa,GAAA;AACX,UAAM,IAAI,GAAG,IAAI,IAAJ,EAAb;AACA,UAAM,MAAM,GAAG,IAAI,CAAC,MAAL,EAAf;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,QAAL,EAAjB;AACA,UAAM,aAAa,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,MAA3B,CAAtB;AACA,UAAM,eAAe,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,QAA3B,CAAxB;AACA,IAAA,IAAI,CAAC,OAAL,CAAa,aAAa,GAAG,aAAH,GAAmB,CAA7C;AACA,IAAA,IAAI,CAAC,QAAL,CAAc,eAAe,GAAE,eAAF,GAAoB,CAAjD;AACA,WAAO,IAAP;AACD;;AAjDyB;;;mBAAf,e,EAAe,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,eAAA,C;AAAA,C;;;SAAf,e;AAAe,EAAA,OAAA,EAAf,eAAe,CAAA,I;AAAA,EAAA,UAAA,EAFd","sourcesContent":["import { Injectable } from '@angular/core';\nimport { range } from 'rxjs';\nimport { Purchased, RandomUser } from '../domain-layer/entities/random-users';\nimport { RandomProduct } from '../interface/product';\nimport { ProductsService } from './products.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PurchaseService {\n  purchasableIds: number[] = [];\n\n  constructor(private readonly productsService: ProductsService) {}\n\n  async getPurchasableIds(): Promise<number[]> {\n    return await this.productsService\n      .getPurchasableIds()\n      .then((ids) => ids);\n  }\n\n  async setCustomerRandomPurchase(customer: RandomUser) {\n    if (this.purchasableIds.length === 0) {\n      this.purchasableIds = await this.getPurchasableIds();\n    }\n    const randomAmountOfPurchases = Math.floor(Math.random() * 10)\n    customer.purchased = []\n    for (let i = 0; i < randomAmountOfPurchases; i++) {\n      const randomPurchase = this._getRandomPurchase()\n      this._makeAPurchase(customer, randomPurchase);\n    }\n  }\n\n  private _makeAPurchase(customer: RandomUser, purchasedObject: Purchased): void {\n    customer.purchased?.push(purchasedObject)\n    this.productsService.increasePurchaseCounter(purchasedObject.id);\n  }\n\n  private _getRandomPurchase(): Purchased {\n    const randomIndex = Math.floor(Math.random() * this.purchasableIds.length);\n    const productId = this.purchasableIds[randomIndex];\n    const price = this.productsService.getProductPrice(productId);\n    \n    return {\n      id: productId,\n      date: this.getRandomDate(),\n      total_cost: price ? price : '',\n    };\n  }\n\n  getRandomDate(): Date {\n    const date = new Date();\n    const nowDay = date.getDay();\n    const nowMonth = date.getMonth();\n    const randomPastDay = Math.floor(Math.random() * nowDay);\n    const randomPastMonth = Math.floor(Math.random() * nowMonth);\n    date.setDate(randomPastDay ? randomPastDay : 1);\n    date.setMonth(randomPastMonth? randomPastMonth : 1);\n    return date;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}